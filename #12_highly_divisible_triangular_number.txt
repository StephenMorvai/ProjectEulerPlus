import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {
    
    
    
    public static int[] primeFactorization(int num){
		
		int[] primes = {2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97};
        
		int[] results = new int[25];
		
		for(int i = 0; i < primes.length; i++){
			while(num%primes[i] == 0){
				results[i]++;
				num/=primes[i];
			}
		}
		
		return results;
	}
    
    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner in = new Scanner(System.in);
        
        int t= in.nextInt();
        
        for(t=t; t>0; t--){
            
            int n = in.nextInt();
            
            /*
            Logic

            answer is a triangular number

            tri is the set of all number that are

            n*(n+1)/2 where n is a natural number. 
            
            It is guarenteed that either n or n+1 is even, so the divided by two will remove factors divisible by 2, factors divisible by 2^x would just be reduced to divisible by 2^x-1
            
            so lets say its (n/2)(n+1) or (n)([n+1]/2)
                if either of those have factors the combinations of them are also factors

            test 8:

                (8*9)/2 = 36

                2*2*2*3*3/2 = 2*2*3*3
             
                So factors = 1, 2, 3, 2*2 = 4, 2*3 = 6, 3*3 = 9, 2*2*3 = 12, 2*3*3 = 18, 2*2*3*3 = 36
                1,2,3,4,6,9,12,18,36 -> 9

            test 7:
                2*2*7 = 28
                1,2,4,7,14,28 -> 6

            test 6:
                3*7 = 21
                1,3,7,21 -> 4
            test 3:
                1,3 -> 2
                
            test 9:
                9*5 = 3*3*5
                 1,3,5,9,15,45 -> 6
            test 10:
                5*11
                1,5,11,55 -> 4
            test 11:
                6*11 = 2*3*11
                1,2,3,6,11,22,33,66 -> 8

            function for determining the number of factors based on prime factors
            
            2*3
            
            1
            2 3
            6 -> 1 + 2 + 1 = 4
            
            
            2*3*5

            1
            2 3 5
            6 10 15
            15 -> 1 + 3 + 3 + 1 = 8

            2*3*5*7
            1
            2 3 5 7
            6 10 14 15 21 35
            30 42 70 105
            210 -> 1 + 4 + 6 + 4 + 1

            if 2*2*3*5
            
            1
            2 3 5 (-1)
            4 6 10 15 (-2)
            12 20 30 (-1)
            60  ->12
            
            if 2*2*3*3
            
            1
            2 3 (-2)
            4 6 9 (-3)
            12 18 (-2)
            36
            
            if 2*2*2*3
            
            1
            2 3 (-2)
            4 6 (-4)
            8 12 (-2)
            24
            
            if 2*2*2*2
            
            1
            2 (-3)
            4 (-5)
            8 (-3)
            16
            

            Determining a pattern is difficult

            
            My web search has led me to the formula that if the prime factorization is

            a^n  * b^m * c^q * d^w
            
            the number of factors is 

            (n+1)(m+1)(q+1)(w+1)

            test this
            
            2*3*5
            there would be 2*2*2 factors = 8
            
            2*2*3*5 

            3*2*2 = 12
            
            This formula appears correct.

            Lets see what the max would be

            log2(1000) < 10

            so there would need to be 10 different primes to get 1000 factors
            Or alternatively you would need to have 2^999 to get 1000 the other way

            Therefore my array can be 10 in length
            
            */
            
            for(int i = 1; i <= 100000; i++){
                int sum = i*(i+1)/2;
                int[] facts = primeFactorization(sum);
                
                long product = 1;
                for(int j = 0; j < facts.length; j++){
                    product*= facts[j] + 1;
                }
                
                if(product > n){
                    System.out.println(sum);
                    break;
                }
                
                
            }
            
            
        }
        
    }
}